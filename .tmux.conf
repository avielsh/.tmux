# Local config
if-shell "[ -f ~/.tmux.conf.user ]" 'source ~/.tmux.conf.user'

# Ring the bell if any background window rang a bell
set -g bell-action any

# Terminal type configuration
set -g default-terminal "screen-256color"
set -ga terminal-overrides ",xterm-256color:Tc"
  
set -g monitor-activity on
set -g monitor-bell on

set -g assume-paste-time 0

#Status
#Aliases: Windows flags(#F) , Window Index(#I), Window name(#W)
set -g status-right '#{prefix_highlight} | #W | %a %Y-%m-%d %H:%M'
set -g status-left '#[fg=colour235,bg=colour252,bold] P:#{window_panes} ‚ùê #{pane_current_command}#[fg=colour252,bg=colour238,nobold]‚ÆÄ#[fg=colour245,bg=colour238,bold] #[fg=colour238,bg=colour234,nobold]‚ÆÄ'
#set  status-left-length 40
setw -g window-status-format '#[fg=colour235,bg=colour252,bold] #F #I #{pane_current_command}'
setw -g window-status-format '#[fg=colour235,bg=colour252,bold]#F#I #{=-8:window_name} #{?#{!=:#{pane_current_command},zsh},#{pane_current_command}, }'
set -g window-status-current-format '#[fg=colour234,bg=colour39]‚ÆÄ#[fg=black,bg=colour39,noreverse,bold]#F#I #{pane_current_command} #[fg=colour39,bg=colour234,nobold]‚ÆÄ'
set -g status-left-length 32
set -g status-right-length 51

#color config
set -g default-terminal screen-256color

#colors
set -g status-fg white
set -g status-style bg=colour234
set -g window-status-activity-style bold
set -g pane-border-style fg=colour245
set -g pane-active-border-style fg=colour39
set -g message-style fg=colour16
set -g message-style bg=colour221
set -g message-style bold

setw -g word-separators ' @"=()[]'
set -g allow-rename on
set -g repeat-time 300
# Use Vim shortcuts

set -g set-titles on

set-option -g status-interval 2

# Patch for OS X pbpaste and pbcopy under tmux - Deprecated - using tmux-yank
#set-option -g default-command "which reattach-to-user-namespace > /dev/null && reattach-to-user-namespace -l $SHELL || $SHELL"

# No escape time for vi mode
set -sg escape-time 0

# Bigger history
set -g history-limit 1000000

#Renumber windows to 1 instead of 0
set-option -g base-index 1
set-window-option -g pane-base-index 1

set-window-option -g mouse on
set -g renumber-windows on 
set -g mouse on
set -g history-file ~/.tmux-history
set -g status-keys vi

#change prefix
unbind C-b
set -g prefix C-a
bind a send-prefix
#Switch prefix in case we want to use C-a for remote tmux session
bind C-b if-shell 'tmux show-options -vg prefix | grep "C-a"' \
"set -g prefix C-b \; display 'Prefix is C-b'" \
"set -g prefix C-a \; display 'Prefix is C-a'"

#Bindings
bind ^D detach-client

# Create splits and vertical splits
bind | split-window -h -p 30 -c "#{pane_current_path}"
bind ^V split-window -h -p 50 -c "#{pane_current_path}"
bind s split-window -p 50 -c "#{pane_current_path}"
bind _ split-window -p 30 -c "#{pane_current_path}"

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to shift-ctrl-<h,j,k,l> in iTerm.
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Smart pane switching with awareness of vim splits.
# Source: https://github.com/christoomey/vim-tmux-navigator
#is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
# bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"

bind -n C-j last-pane
# bind -n M-l last-pane
#meta bindings
#Switch to main window and zoom toogle
is_zoomed='echo "#{window_zoomed_flag}" | grep -q "1"'
bind -n M-z if-shell "$is_zoomed" "last-pane" "select-pane -t:.1 \; resize-pane -Z"

bind -n M-x previous-window
bind -n M-c next-window
bind -n M-v last-window

# bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
#bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

#Bind to free window
bind C-x run -b "tmux list-windows -F '##{window_index} ##{pane_current_command}' | grep zsh | awk '{print $1}' | tail -1 | xargs tmux select-window -t"
#Bind to window containing vrc command
bind C-v run -b "tmux list-windows -F '##{window_index} ##{window_name}' | grep vrc | awk '{print $1}' | tail -1 | xargs tmux select-window -t"
#Bind to window containing ssh command
bind C-s run -b "tmux list-windows -F '##{window_index} ##{pane_current_command}' | grep ssh | awk '{print $1}' | tail -1 | xargs tmux select-window -t"
#Bind to window containing man command
bind C-s run -b "tmux list-windows -F '##{window_index} ##{pane_current_command}' | grep man | awk '{print $1}' | tail -1 | xargs tmux select-window -t"
#
# New windows/pane in $PWD
bind c new-window -c "#{pane_current_path}"

# Make `Ctrl+a R` reload the config file
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# Screen like binding for last window
unbind l
bind C-a last-window

#vi mode search
bind-key -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""

#buffers
bind P choose-buffer # choose which buffer to paste from
# bind C-v paste-buffer

#bind m to Enable/Disable mouse 
bind m if-shell 'tmux show-options -vg mouse | grep on' \
"set -g mouse off \; display \"Mouse is OFF\"" \
"set -g mouse on  \; display 'Mouse is ON'"

#Kill stuff
bind x confirm-before -p "Kill window? [y/n] " kill-pane
bind C-q confirm-before -p "Kill session? [y/n] " kill-session

#faster copy mode
bind q copy-mode
bind w paste-buffer

#bind pageup to scroll
bind -Troot PageUp "select-pane ; copy-mode  ; send-keys -X page-up"

#Hooks - Deperacted - using tmux-zorder-menu
#set-hook -g after-select-window "run ~/tmux_session.zsh"
#run "tmux list-windows -F '##{window_index} ##{window_active}' | awk '$2==1 {print $1}'| xargs tmux set -g @zorder"
#Bind zorder
#bind s "run-shell '~/tmux_session.zsh zorder_show_menu'"

#MACROS
bind-key -Troot c-s switch-client -Tmacros
bind-key -Tmacros c list-keys -Tmacros
bind-key -Tmacros c-s send-keys c-s

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'avielsh/tmux-zorder-menu'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-urlview'

#Plugin config
set -g @resurrect-strategy-vim 'session'
set -g @prefix_highlight_output_prefix '‚å®Ô∏è  ' #keyboard
set -g @prefix_highlight_show_copy_mode 'on'
set -g @crefix_highlight_copy_mode_attr 'fg=black,bg=blue,bold' # default is 'fg=default,bg=yellow'
set -g @prefix_highlight_copy_prompt 'üçÄ'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'

# set -g @plugin 'git@bitbucket.com/user/plugin'
# MOUSE BINDING
#new window on right click status
bind -n MouseDown3Status new-window -a -t=
#double click status to close window
bind -n DoubleClick1Status kill-window -t=

#right click paste
bind-key -n MouseDown3Pane paste-buffer

#copy mode binding
#escape mode with escape
bind -T copymode-vi Escape send-keys -X cancel
#don't select new line on $
bind -T copy-mode-vi "\$" \
  send-keys -X end-of-line \; \
  send-keys -X cursor-left \; \
#Open google search on selection
bind -T copy-mode-vi "d" send-keys -X copy-pipe-and-cancel "xargs -I{} open 'https://www.google.com/search?q='\"{}\""
#ripgrep selection
bind -T copy-mode-vi "g" \
  send-keys -X copy-selection-and-cancel \; \
  send-keys "rg -w " \; \
  pasteb \; \
  send-keys Enter \; \
#open selection in vim
bind -T copy-mode-vi "v" \
  send-keys -X copy-selection-and-cancel \; \
  send-keys "vi " \; \
  pasteb \; \
  send-keys Enter \; \
#fzf take selection and cd to folder - unused
# bind -T copy-mode-vi "D" \
  # send-keys -X clear-selection \; \
  # send-keys -X start-of-line \; \
  # send-keys -X next-word \; \
  # send-keys -X begin-selection \; \
  # send-keys -X end-of-line \; \
  # send-keys -X cursor-left \; \
  # send-keys -X copy-pipe-and-cancel "pbcopy" \; \
  # send-keys C-c \; \
  # run-shell "sleep 0.2s" \; \
  # send-keys "fcd \'" \; \
  # paste-buffer \; \
  # send-keys "\'" Enter
#?
bind -T copy-mode-vi MouseDown3Pane \
    select-pane \; \
    send-keys -X copy-selection-and-cancel
#double click to copy a WORD
bind -T copy-mode-vi DoubleClick1Pane \
    select-pane \; \
    send-keys -X select-word \; \
    send-keys -X copy-pipe "pbcopy"
bind -n DoubleClick1Pane \
    select-pane \; \
    copy-mode -M \; \
    send-keys -X select-word \; \
    send-keys -X copy-pipe-and-cancel "pbcopy" \; \
    display-message "Copied to clip..."
#Triple click to select whole line
bind -n TripleClick1Pane \
    select-pane \; \
    copy-mode -M \; \
    send-keys -X select-line \; \
    send-keys -X copy-pipe-and-cancel "pbcopy" \; \
    display-message "Copied line to clip..."


# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
